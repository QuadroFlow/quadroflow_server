// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema1 extends i0.VersionedSchema {
  Schema1({required super.database}) : super(version: 1);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [users];
  late final Shape0 users = Shape0(
    source: i0.VersionedTable(
      entityName: 'users',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<double> get id =>
      columnsByName['id']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<double> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get password =>
      columnsByName['password']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get role =>
      columnsByName['role']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get picture =>
      columnsByName['picture']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<double> _column_0(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      defaultValue: const CustomExpression('gen_random_uuid()'),
    );
i1.GeneratedColumn<double> _column_1(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<double> _column_2(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<double> _column_3(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'deleted_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.double,
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'email',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'password',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'role',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'picture',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema1 schema) from0To1,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 0:
        final schema = Schema1(database: database);
        final migrator = i1.Migrator(database, schema);
        await from0To1(migrator, schema);
        return 1;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema1 schema) from0To1,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from0To1: from0To1),
);
